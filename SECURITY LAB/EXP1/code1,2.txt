#Ceaser Cipher Encryption
import string
all_letters= string.ascii_letters #A list containing all characters

dict1 = {}
key = 3
for i in range(len(all_letters)):
	dict1[all_letters[i]] = all_letters[(i+key)%len(all_letters)]
plain_txt= "HARSH"
cipher_txt=[]
# loop to generate ciphertext
for char in plain_txt:
	if char in all_letters:
		temp = dict1[char]
		cipher_txt.append(temp)
	else:
		temp =char
		cipher_txt.append(temp)
		
cipher_txt= "".join(cipher_txt)
print("Cipher Text is: ",cipher_txt)




#Ceaser Cipher Decryption
import string
all_letters= string.ascii_letters #A list containing all characters

dict1 = {}
key = 3
for i in range(len(all_letters)):
	dict1[all_letters[i]] = all_letters[(i-key)%len(all_letters)]
cipher_txt= "KDUVK"
plain_txt= []
# loop to generate ciphertext
for char in cipher_txt:
	if char in all_letters:
		temp = dict1[char]
		plain_txt.append(temp)
	else:
		temp =char
		plain_txt.append(temp)
		
plain_txt= "".join(plain_txt)
print("Plain Text is: ",plain_txt)




#Brute Force Attack on Ceaser Cipher
import string
all_letters= string.ascii_letters #A list containing all characters

dict1 = {}
for key in range(0,25):
  for i in range(len(all_letters)):
    dict1[all_letters[i]] = all_letters[(i-key)%len(all_letters)]
  shift_txt="KDUVK"
  plain_txt= []
  # loop to generate ciphertext
  for char in shift_txt:
    if char in all_letters:
      temp = dict1[char]
      plain_txt.append(temp)
    else:
      temp =char
      plain_txt.append(temp)
      
  plain_txt= "".join(plain_txt)
  print("Plain Text is: ",plain_txt)





#Railfence Encryption
cipher_text=""
def railfence(plain_text,key):
    if key==3:
        return (plain_text[::2]+plain_text[1::2])
    else: 
        return "number of rails not supported"
cipher_text= railfence("lol is fake ", 3)
print("Cipher Text Using Railfence:",cipher_text)





#Railfence Decryption:
block1=cipher_text[:6:]
print(block1)
block2=cipher_text[6::]
print(block2)
print("Original/Decrypted Text:",end="")
x1=print(block1[0]+block2[0]+block1[1]+block2[1]+block1[2]+block2[2]+block1[3]+block2[3]+
         block1[4]+block2[4]+block1[5]+block2[5])





#Encryption of Product Cipher Using Railfence
product_text= railfence(cipher_text, 3)
print("Product Text Using Railfence:",product_text)




#Dencryption of Product Cipher Using Railfence
block3=product_text[:6:]
print(block3)
block4=product_text[6::]
print(block4)
print("Decrypted Product Text:",end="")
x1=print(block3[0]+block4[0]+block3[1]+block4[1]+block3[2]+block4[2]+block3[3]+block4[3]+
         block3[4]+block4[4]+block3[5]+block4[5])




#STPES TO Perform RSA encryption and decryption

1. ifconfig
2. ssh student@172.20.210.133
3. /usr/lib/ssl/misc/CA.pl
4. /usr/lib/ssl/openssl.cnf
5. /usr/lib/ssl/misc/CA.pl -newca
6. mkdir student
7. ls
8. openssl req -new -keyout privatekey.pem -out reqstudent.pem
9. ls
10. openssl ca reqstudent.pem
11.ls
12. cd demoCA
13. cd newcerts
l4. ls 
15. openssl verify -CAfile demoCA/cacert.pem  demoCA/cacerts/encrypteddata which you will get from ls .pem
16. gedit filename.txt
17. sha256sum filename.txt









#password attack
traceroute www.google.com
dig www.facebook.com
w
who
whois google
netstat -la
ifconfig
pstree -n
stat requser.pem
nslookup www.google.com

to connect to another pc :
ssh student@172.20.210.133







#kleopatra
Working with encrypted files
To encrypt a file:

Choose Sign/Encrypt… from the main window.

Select the file that you want to encrypt.

In the Sign/Encrypt Files dialog, either:

Specify which OpenPGP keys you want to encrypt the file to.

Choose Encrypt with password.

To decrypt a file:

Choose Decrypt/Verify… from the main window.

Select the file that you want to decrypt.

Working with encrypted text
To encrypt text:

Choose Notepad from the main window.

Type your text in the Notepad tab in the bottom pane.

In the Recipients tab, either:

Specify which OpenPGP keys you want to encrypt the text to.

Choose Encrypt with password.

To decrypt text:

Choose Notepad from the main window.

Paste the encrypted text in the Notepad tab in the bottom pane.

Choose Decrypt/Verify Notepad.





